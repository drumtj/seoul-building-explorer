import:
  - https://mapzen.com/carto/zinc-style-no-labels/6/zinc-style-no-labels.zip


styles:
  # Give some transparency to polygon
  alpha_polygons:
    base: polygons
    blend: multiply

global:
    ux_language: 'en'
    text_visible_admin: true
    text_visible_populated_places:  true
    icon_visible_populated_places:  true
    text_visible_neighbourhoods:    true
    text_visible_neighbourhoods_e:  true
    key_text: ''
    age:
    lang: en
    filter: |
        function () {
          if (!global.age) {
            return true;
          } else {

              var arr = feature['year'].slice(0, 3);
              var age = 201 - parseInt(arr);
              return (age == global.age)

          }
        }
    zoom_out_filter: |
      function () {
        if (!global.age) {
          return true;
        } else {
          if (feature['average']) {
            var val = feature['average'].toString();
            var arr = val.slice(0, 3);
            var age = 201 - parseInt(arr);
            return (age == global.age);
          }
        }
      }
    zoom_out_matching:
      filter: global.zoom_out_filter
      draw:
        polygons:
          color: |
            function () {
              if(feature['average']) {
                var val = feature['average'].toString();
                var arr = val.slice(0, 3);
                var age = 201 - parseInt(arr);
                return globalAsset.viridis[age];
              } else {
                return '#333'
              }
            }
    matching:
        filter: global.filter
        draw:
            lines:
                interactive: true
                order: 1000
                color: white
                width: |
                  function () {
                    if (!global.age) {
                      return 0;
                    } else {
                      return 5;
                    }
                  }
            polygons:
              color: |
                function () {
                  var arr = feature['year'].slice(0, 3);
                  var age = 201 - parseInt(arr);
                  return globalAsset.viridis[age];
                }
sources:
  seoul-buildings:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/seoul-buildings-final/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    min_zoom: 15
    max_zoom: 18
    scripts: ['./globalAsset.js']
  seoul-buildings-2345:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/final-buildings-2345/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    min_zoom: 15
    max_zoom: 18
  seoul-buildings-678:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/final-buildings-678/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    min_zoom: 15
    max_zoom: 18
  seoul-buildings-901:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/final-buildings-901/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    min_zoom: 15
    max_zoom: 18
  seoul-buildings-null:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/final-buildings-null/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    min_zoom: 15
    max_zoom: 18
  seoul-dongs:
    type: GeoJSON
    url: './final-dong.geojson'
    min_display_zoom: 10
    max_display_zoom: 16

layers:
  buildings-2345:
    data: {source: seoul-buildings-2345}
    matching: global.matching
    draw:
      polygons:
        interactive: true
        order: 3001
        extrude: |
          function () {
            return feature['h']*5;
          }
        color: '#333'
  buildings-678:
    data: {source: seoul-buildings-678}
    matching: global.matching
    draw:
      polygons:
        interactive: true
        order: 3001
        extrude: |
          function () {
            return feature['h']*5;
          }
        color: '#333'
  buildings-901:
    data: {source: seoul-buildings-901}
    matching: global.matching
    draw:
      polygons:
        interactive: true
        order: 3001
        extrude: |
          function () {
            return feature['h']*5;
          }
        color: '#333'
  buildings-null:
    data: {source: seoul-buildings-null}
    draw:
      polygons:
        interactive: true
        order: 3001
        extrude: |
          function () {
            return feature['h']*5;
          }
        color: '#333'
  # let's hide buildings from tile
  buildings:
    data: { source: mapzen, layer: buildings }
    visible: false

  custom-dongs:
    data: { source: seoul-dongs }
    filter: { $zoom: { min: 13, max: 15 } }
    draw:
      alpha_polygons:
        interactive: true
        order: 300
        color: |
          function () {
            if(feature['average']) {
              var val = feature['average'].toString();
              var arr = val.slice(0, 3);
              var age = 201 - parseInt(arr);
              return globalAsset.viridis[age];
            } else {
              return '#333'
            }
          }
  other-dongs:
    data: { source: seoul-dongs }
    filter: { $zoom: { min: 11, max: 13 } }
    matching: global.zoom_out_matching
    draw:
      lines:
        color: '#ccc'
        width: 1px
        order: 1001
      polygons:
        interactive: true
        order: 1000
        color: '#333'

  min-zoom-dongs:
    data: { source: seoul-dongs }
    filter: { $zoom: { min: 10, max: 11 } }
    matching: global.zoom_out_matching
    draw:
      polygons:
        interactive: true
        order: 3000
        color: '#333'

  roads:
    data: { source: mapzen, layer: roads }
    minor_road:
      filter: { kind: minor_road }
      draw:
        lines:
          width: [[12, 0px], [14, 0px], [15, 3px], [16, 5m]]
