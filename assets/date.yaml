import:
  - https://mapzen.com/carto/zinc-style-no-labels/5/zinc-style-no-labels.zip

# This code is from original explorer
# https://github.com/tangrams/explorer/blob/gh-pages/scene.yaml
global:
    key_text: ''
    value_text: ''
styles:
  # Give some transparency to
  alpha_polygons:
    base: polygons
    blend: multiply

sources:
  seoul-buildings:
    type: GeoJSON
    url: https://s3.amazonaws.com/odd-tiles/seoul-building/{z}/{x}/{y}.geojson
    min_display_zoom: 15
    max_display_zoom: 18
    scripts: ['./ten-colors.js']
  seoul-dongs:
    type: GeoJSON
    url: './dongs.geojson'
    min_display_zoom: 12
    max_display_zoom: 17
    scripts: ['./ten-colors.js']

layers:
  custom-bulidings:
    data: {source: seoul-buildings}
    draw:
      polygons:
        interactive: true
        order: 3001
        extrude: false
        color: |
          function () {
            if(feature['A13']) {
              var arr = feature['A13'].slice(0, 3);
              var gap = 201 - parseInt(arr);
              return globalColor[gap];
            } else {
              return 'black'
            }
          }
  buildings:
    data: { source: mapzen, layer: buildings }
    visible: false
  custom-dongs:
    data: { source: seoul-dongs }
    filter: { $zoom: { min: 14, max: 16 } }
    draw:
      alpha_polygons:
        interactive: true
        order: 3000
        extrude: false
        color: |
          function () {
            if(feature['average']) {
              var val = feature['average'].toString();
              var arr = val.slice(0, 3);
              var gap = 201 - parseInt(arr);
              return globalColor[gap];
            } else {
              return 'black'
            }
          }
  other-dongs:
    data: { source: seoul-dongs }
    filter: { $zoom: { min: 12, max: 14 } }
    draw:
      polygons:
        interactive: true
        order: 3000
        extrude: false
        color: |
          function () {
            if(feature['average']) {
              var val = feature['average'].toString();
              var arr = val.slice(0, 3);
              var gap = 201 - parseInt(arr);
              return globalColor[gap];
            } else {
              return 'black'
            }
          }
  labels:
    data: {source: mapzen, layer: places}
    draw:
      text:
        centroid: true
        font:
          stroke: {color: gray, width: 2 }
          size: [[13, 10px],[14,14px],[15, 16px]]
          family: Sans Serif
          fill: whilte
        text_source: |
          function () {
            return feature.name.split('(')[0];
          }